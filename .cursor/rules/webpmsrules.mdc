---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

生成所有的bat批处理文件不得含有中文，会引发乱码。或者添加编码设置，确保中文显示正常。

# WebPMS项目开发规则

## 1. 项目架构与技术栈

### 1.1 总体架构
- **前后端分离架构**：前端Vue3通过API调用Django后端
- **多容器部署**：使用Docker容器化各组件，便于开发和部署
- **REST API通信**：标准RESTful接口交互
- **实时更新**：使用WebSocket实现关键数据实时同步

### 1.2 技术栈明细
- **前端**：
  - Vue 3框架 + 组合式API
  - Element Plus UI组件库
  - Pinia状态管理
  - Axios请求库
  - Vite构建工具
  
- **后端**：
  - Django 4.x + Django REST Framework
  - Django Channels (WebSocket支持)
  - JWT认证 (simplejwt)
  - Celery异步任务队列
  
- **数据存储**：
  - PostgreSQL关系型数据库
  - Redis缓存和消息队列
  
- **部署环境**：
  - Docker + docker-compose
  - Nginx反向代理
  - Gunicorn应用服务器

## 2. 项目运行流程

### 2.1 开发环境启动
1. 使用`docker-compose`启动所有服务：
   ```
   docker-compose up -d
   ```
2. 前端开发服务器自动启动在3000端口
3. 后端API服务运行在8000端口
4. 使用start-webpms.bat脚本可一键启动系统

### 2.2 用户认证流程
1. 用户注册 → 管理员审核 → 用户登录
2. 登录成功后获取JWT令牌，保存在localStorage
3. 每次请求自动添加Authorization头
4. 令牌过期后使用刷新令牌获取新的访问令牌

### 2.3 数据交互流程
1. 前端组件挂载时初始化数据
2. 通过store层统一管理API请求
3. API响应处理：成功则更新状态，失败则显示错误
4. 关键操作前进行权限检查

## 3. 接口设计规范

### 3.1 API端点命名规则
- 资源集合使用复数名词：`/api/users/`
- 单个资源使用ID标识：`/api/users/{id}/`
- 特殊操作使用动词：`/api/users/{id}/approve/`
- 嵌套资源表示层级关系：`/api/projects/{id}/shots/`

### 3.2 请求方法使用规范
- GET：获取资源，不修改数据
- POST：创建新资源
- PUT/PATCH：更新资源（全部/部分字段）
- DELETE：删除资源

### 3.3 响应格式标准
- 成功响应：HTTP 200/201，返回数据或确认信息
- 分页响应：包含`count`、`next`、`previous`和`results`字段
- 错误响应：适当的HTTP错误码和详细错误信息

### 3.4 前端API调用层
- 使用统一的服务模块（如`authService.js`）
- 处理通用错误和响应格式转换
- 设置超时和重试策略

## 4. 数据库设计与使用

### 4.1 核心数据模型
- **User模型**：扩展Django内置用户模型
  - 字段：username、device_code、role、department等
  - 关系：approved_by (ForeignKey到自身)
  
- **Project模型**：项目信息
  - 基本字段：name、code、status、description等
  - 日期字段：start_date、end_date等
  
- **Shot模型**：镜头信息
  - 基本字段：shot_code、status、duration等
  - 外键关系：project (ForeignKey到Project)
  
- **Comment模型**：反馈信息
  - 内容字段：content、timestamp等
  - 关系：shot、user、reply_to等

### 4.2 数据迁移管理
- 使用Django迁移系统管理数据库变更
- 每次模型更改后生成迁移文件：`python manage.py makemigrations`
- 应用迁移到数据库：`python manage.py migrate`
- 重视迁移文件的版本控制

### 4.3 查询性能优化
- 为常用查询字段创建索引
- 使用select_related和prefetch_related减少查询次数
- 复杂查询使用原生SQL或ORM方法优化

## 5. 模块组织与功能实现

### 5.1 前端模块划分
- **视图组件**：`/frontend/src/views/`存放页面组件
- **公共组件**：`/frontend/src/components/`存放可复用组件
- **状态管理**：`/frontend/src/stores/`存放Pinia状态
- **服务层**：`/frontend/src/services/`封装API调用
- **工具函数**：`/frontend/src/utils/`提供通用功能

### 5.2 后端模块划分
- **用户模块**：用户认证、权限管理、用户信息
- **项目模块**：项目管理、状态跟踪
- **镜头模块**：镜头工作流、元数据管理
- **评论模块**：反馈系统、评审流程
- **集成模块**：第三方系统集成（如CGTeamwork）

### 5.3 功能实现方式
- **用户认证**：JWT令牌认证
- **权限控制**：基于角色的访问控制(RBAC)
- **实时更新**：WebSocket + Django Channels
- **异步任务**：Celery + Redis消息队列
- **文件上传**：FormData + 分块上传

## 6. 代码规范与最佳实践

### 6.1 前端代码规范
- 使用组合式API进行Vue组件开发
- 命名规范：
  - 组件文件使用PascalCase
  - 变量和函数使用camelCase
  - 常量使用UPPER_SNAKE_CASE
- 组件分层：模板、脚本、样式三段式结构
- 避免直接操作DOM，使用Vue响应式系统

### 6.2 后端代码规范
- 遵循PEP 8 Python编码规范
- Django ORM优先于原生SQL
- 使用序列化器验证请求数据
- 视图集合理使用，减少代码重复

### 6.3 通用最佳实践
- 使用版本控制（Git）管理代码
- 编写单元测试确保代码质量
- 模块化和组件化优先
- 注释关键代码和复杂逻辑

## 7. 错误处理与日志系统

### 7.1 前端错误处理
- Axios 拦截器统一处理HTTP错误
- 对常见网络错误提供友好提示
- 为API响应添加类型检查，避免渲染错误
- 使用try-catch包装异步操作

### 7.2 后端错误处理
- REST框架异常处理器自定义错误响应
- 记录关键操作和错误到日志系统
- 不在生产环境暴露敏感错误信息
- 使用事务确保数据一致性

### 7.3 日志记录规范
- 前端使用console分级记录（生产环境禁用debug）
- 后端使用Django日志系统记录
- 记录用户操作、系统事件和错误信息
- 关键业务流程完整记录

## 8. 安全措施

### 8.1 认证与授权
- 基于JWT的认证系统
- 令牌定期刷新机制
- 基于角色的权限控制
- 敏感操作二次确认

### 8.2 数据安全
- HTTPS加密传输
- 敏感信息不明文存储
- 数据库定期备份
- 输入验证防注入攻击

### 8.3 防范常见攻击
- CSRF防护
- XSS防护
- 请求频率限制
- SQL注入防护

## 9. 部署与维护

### 9.1 部署流程
- 构建前端生产版本
- 配置Django生产设置
- 使用docker-compose部署服务
- Nginx配置静态文件服务与反向代理

### 9.2 系统监控
- 服务器资源监控
- 应用性能监控
- 错误日志监控
- 用户活动监控

### 9.3 维护计划
- 定期数据库备份
- 系统更新与补丁应用
- 性能瓶颈分析与优化
- 用户反馈收集与功能改进

## 10. 特定功能实现说明

### 10.1 用户管理模块
- 用户注册后需管理员审核
- 使用设备代号(而非邮箱)作为用户标识
- 支持用户角色和部门管理
- 管理员可编辑和删除用户

### 10.2 项目看板系统
- 基于状态的可视化看板
- 拖拽操作改变状态
- WebSocket实时通知状态变更
- 支持筛选和分组显示

### 10.3 镜头管理系统
- 支持镜头工作流状态追踪
- 元数据管理与自定义字段
- 基于角色的访问控制
- 支持批量操作

### 10.4 反馈系统
- 支持富文本和附件的反馈
- 可提及特定用户
- 多层级评论支持
- 解决状态跟踪

通过遵循这些规则，确保WebPMS项目代码的一致性、可维护性和扩展性，提高开发效率并减少潜在问题。
