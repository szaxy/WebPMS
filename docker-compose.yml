services:
  # PostgreSQL数据库服务 - 使用本地构建
  db:
    build:
      context: ./db/postgresql
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存服务 - 使用本地构建
  redis:
    build:
      context: ./db/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django后端应用
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - ./media:/app/media
      - ./static:/app/static
    env_file: .env
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0

  # Celery异步任务处理
  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core worker -l INFO
    volumes:
      - ./backend:/app
    env_file: .env
    depends_on:
      - backend
      - redis
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0

  # Celery Beat定时任务
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core beat -l INFO
    volumes:
      - ./backend:/app
    env_file: .env
    depends_on:
      - celery
      - redis
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0

  # Vue前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000/api

volumes:
  postgres_data:
  redis_data: 