services:
  # PostgreSQL database service
  db:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/postgres:14.15
    pull_policy: never
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT:-15432}:5432"  # 使用环境变量或默认值

  # Redis cache service
  redis:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/redis:alpine
    pull_policy: never
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data

  # Django backend application
  backend:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/python:3.10-slim
    pull_policy: never
    working_dir: /app
    command: >
      sh -c "cd /app && 
             pip install --no-index --find-links=/offline-packages --find-links=/offline-packages/py3 -r requirements.txt &&
             python manage.py makemigrations &&
             python manage.py migrate --noinput || echo 'Migration error, continuing anyway...' &&
             python manage.py runserver 0.0.0.0:${BACKEND_PORT:-8000}"
    volumes:
      - ./backend:/app
      - ./media:/app/media
      - ./static:/app/static
      - ./offline-resources/python-packages:/offline-packages
      - ./requirements.txt:/app/requirements.txt
    env_file: 
      - .env
      - .env.ports
    depends_on:
      - db
      - redis
    ports:
      - "${BACKEND_PORT:-8000}:${BACKEND_PORT:-8000}"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - BACKEND_PORT=${BACKEND_PORT:-8000}

  # Vue frontend application
  frontend:
    image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/library/node:18-alpine
    pull_policy: never
    working_dir: /app
    command: >
      sh -c "echo '=== 前端准备工作开始 ===' &&
             # 解压离线node_modules包
             if [ ! -d '/app/node_modules' ]; then
               echo '正在从离线包解压node_modules (可能需要1-2分钟)...' &&
               tar -xf /npm-packages/node_modules.tar.gz -C /app || exit 1;
             else
               echo 'node_modules目录已存在，跳过解压步骤';
             fi &&
             
             # 处理依赖问题
             cd /app &&
             echo '检查关键依赖...' &&
             if [ ! -d '/app/node_modules/element-plus' ] || [ ! -d '/app/node_modules/date-fns' ]; then
               echo '安装缺少的依赖(优先使用离线包)...' &&
               if [ -f '/npm-packages/package-lock.json' ]; then
                 echo '使用离线package-lock.json...' &&
                 cp /npm-packages/package-lock.json /app/;
               fi &&
               npm config set strict-ssl false &&
               
               # 尝试离线安装
               echo '尝试离线模式安装...' &&
               npm install --no-fund --no-audit --legacy-peer-deps --offline || (
                 echo '离线安装失败，切换到在线模式...' &&
                 npm config set registry https://registry.npmjs.org/ &&
                 npm install element-plus@latest date-fns@latest --no-fund --no-audit --legacy-peer-deps --force
               );
             else
               echo '所有关键依赖已安装，跳过安装步骤';
             fi &&
             
             # 启动开发服务器
             echo '=== 前端依赖准备完成，正在启动Vite开发服务器 ===' &&
             FRONTEND_PORT=${FRONTEND_PORT:-3000} npm run dev"
    volumes:
      - ./frontend:/app
      - ./offline-resources/npm-packages:/npm-packages:ro
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-8000}/api
      - FRONTEND_PORT=${FRONTEND_PORT:-3000}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    env_file:
      - .env.ports

volumes:
  postgres_data:
  redis_data: 